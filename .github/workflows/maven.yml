name: Build and Run Docker App

on:
  push:
    branches: [ "main" ]   # or your desired branch
  workflow_dispatch:

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£ Checkout repository
    - name: Checkout code
      uses: actions/checkout@v3

    # 2Ô∏è‚É£ Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 17

    # 3Ô∏è‚É£ Build Maven project
    - name: Build with Maven
      run: mvn clean package -DskipTests

    # 4Ô∏è‚É£ Log in to Docker (if pushing to registry, optional)
    # - name: Docker login
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}

    # 5Ô∏è‚É£ Stop and remove old container (if exists)
    - name: Stop and remove old container
      run: |
        if [ "$(docker ps -q -f name=movie-rating)" ]; then
          docker stop movie-rating
          docker rm movie-rating
        fi

    # 6 Build Docker image
    - name: Build Docker image
      run: docker build --no-cache -t movie-rating .

    # 7 Save Docker image as tar
    - name: Save Docker image
      run: docker save movie-rating -o movie-rating.tar

    # 8 Verify container is running
    - name: Check running container
      run: docker ps --filter name=movie-rating
  aws:
    steps:
    # 9 Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1

    # 7Ô∏è‚É£ Launch EC2 instance
    - name: Launch EC2 instance
      id: ec2
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-0945610b37068d87a \
          --count 1 \
          --instance-type t2.micro \
          --key-name movie-rating.pem \
          --security-group-ids sg-0cb5902487d9c70c8 \
          --subnet-id subnet-767ee810 \
          --query 'Instances[0].InstanceId' \
          --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
        echo "Launched EC2 instance: $INSTANCE_ID"

    # 8Ô∏è‚É£ Wait for EC2 instance to be running
    - name: Wait for EC2
      run: aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

    # 9Ô∏è‚É£ Get EC2 public IP
    - name: Get EC2 public IP
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances \
          --instance-ids ${{ env.INSTANCE_ID }} \
          --query 'Reservations[0].Instances[0].PublicIpAddress' \
          --output text)
        echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        echo "Public IP: $PUBLIC_IP"

    # üîü Copy Docker image to EC2
    - name: Copy Docker image to EC2
      run: scp -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY  }} movie-rating.tar ec2-user@${{ env.EC2_PUBLIC_IP }}:/home/ec2-user/

    # 1Ô∏è‚É£1Ô∏è‚É£ SSH into EC2 and run Docker container
    - name: Run Docker container on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY  }} ec2-user@${{ env.EC2_PUBLIC_IP }} << 'EOF'
          sudo amazon-linux-extras install docker -y
          sudo service docker start
          sudo usermod -aG docker ec2-user
          docker load -i movie-rating.tar
          docker stop movie-rating || true
          docker rm movie-rating || true
          docker run -d --name movie-rating -p 8080:8080 movie-rating
        EOF

    # 1Ô∏è‚É£2Ô∏è‚É£ Wait until Spring Boot app is up
    - name: Wait for Spring Boot app
      run: |
        echo "Waiting for app to be ready..."
        for i in {1..30}; do
          STATUS=$(ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_KEY  }} ec2-user@${{ env.EC2_PUBLIC_IP }} \
            "curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/actuator/health || echo '000'")
          if [ "$STATUS" == "200" ]; then
            echo "App is up!"
            exit 0
          else
            echo "Attempt $i: status=$STATUS, retrying in 5s..."
            sleep 5
          fi
        done
        echo "App did not start in time."
        exit 1

