name: Build and Push Docker App to ECR

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£ Checkout repository
    - name: Checkout code
      uses: actions/checkout@v3

    # 2Ô∏è‚É£ Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 17

    # 3Ô∏è‚É£ Build Maven project
    - name: Build with Maven
      run: mvn clean package -DskipTests

    # 4Ô∏è‚É£ Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1

    # 5Ô∏è‚É£ Log in to ECR
    - name: Login to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2

    # 6Ô∏è‚É£ Build Docker image
    - name: Build Docker image
      run: docker build -t movie-rating .

    # 7Ô∏è‚É£ Tag Docker image for ECR
    - name: Tag Docker image
      run: |
        IMAGE_URI=${{ steps.ecr-login.outputs.registry }}/apps/movie-rating:latest
        docker tag movie-rating $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    # 8Ô∏è‚É£ Push Docker image to ECR
    - name: Push Docker image to ECR
      run: docker push ${{ env.IMAGE_URI }}

    # üîü Launch EC2 instance
    - name: Launch EC2 instance
      id: ec2
      run: |
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ami-0945610b37068d87a \
          --count 1 \
          --instance-type t2.micro \
          --key-name movie-rating \
          --security-group-ids sg-0fb3ea68dfd79b75f \
          --subnet-id subnet-0b01643545bffbdc8 \
          --associate-public-ip-address \
          --iam-instance-profile Name=movie-rating-ec2-ecr \
          --query 'Instances[0].InstanceId' \
          --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

    # 1Ô∏è‚É£1Ô∏è‚É£ Wait for EC2
    - name: Wait for EC2
      run: aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}

    # 1Ô∏è‚É£2Ô∏è‚É£ Get EC2 public IP
    - name: Get EC2 public IP
      run: |
        for i in {1..30}; do
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          if [ "$PUBLIC_IP" != "None" ]; then
            echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
            echo "Public IP: $PUBLIC_IP"
            break
          else
            echo "Waiting for Public IP..."
            sleep 10
          fi
        done
        
    # 1Ô∏è‚É£3Ô∏è‚É£ Write private key
    - name: Write private key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
        chmod 600 private_key.pem

    - name: Wait for SSH
      run: |
        for i in {1..30}; do
          if nc -zv ${{ env.EC2_PUBLIC_IP }} 22; then
            echo "SSH is ready!"
            break
          else
            echo "Waiting for SSH..."
            sleep 10
          fi
        done
      
    # 1Ô∏è‚É£4Ô∏è‚É£ SSH and run Docker container from ECR
    - name: Run Docker container on EC2 from ECR
      run: |
        ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ env.EC2_PUBLIC_IP }} << EOF
          
          # Install AWS CLI v2 if not present
          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          
          # Authenticate Docker to ECR inside EC2
          aws ecr get-login-password --region us-west-1 \
            | docker login --username AWS --password-stdin ${{ steps.ecr-login.outputs.registry }}
      
          # Install Docker
          if ! command -v docker &> /dev/null; then
            # Amazon Linux 2023
            sudo dnf install -y docker
            sudo systemctl enable --now docker
            sudo service docker start
            sudo usermod -aG docker ec2-user
          fi

          echo "Image Here: " ${{ env.IMAGE_URI }}
          sudo docker pull ${{ env.IMAGE_URI }}
          
          # Pull and run Docker image
          sudo docker stop movie-rating || true
          sudo docker rm movie-rating || true
          sudo docker run --name movie-rating -p 8080:8080 ${{ env.IMAGE_URI }}
        EOF
